name: CI/CD Pipeline

on:
  push:
    branches:
      - cicd-pipelines  # Your branch name

jobs:
  build-Test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Your Docker username secret
          password: ${{ secrets.DOCKERTOKEN }}      # Your Docker token secret

      - name: Set Environment Variables
        run: |
          echo "IMAGE_NAME=yuvalbenar/flasksqlgifbase" >> $GITHUB_ENV
          echo "IMAGE_TAG=0.0.${{ github.run_number }}" >> $GITHUB_ENV
          echo "FLASK_ENV=${{ secrets.FLASK_ENV }}" >> $GITHUB_ENV
          echo "MYSQL_HOST=${{ secrets.DATABASE_HOST }}" >> $GITHUB_ENV
          echo "MYSQL_USER=${{ secrets.DATABASE_USER }}" >> $GITHUB_ENV
          echo "MYSQL_DATABASE=${{ secrets.DATABASE_NAME }}" >> $GITHUB_ENV
          echo "PORT=${{ secrets.PORT }}" >> $GITHUB_ENV
          echo "MYSQL_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> $GITHUB_ENV
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_ENV

      - name: Build Docker Compose Image
        run: |
          pwd
          ls
          docker compose build --no-cache
          docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}

      - name: Push Docker Image
        run: |
          docker images    
          docker push ${IMAGE_NAME}:${IMAGE_TAG}
          docker push ${IMAGE_NAME}:latest

      - name: Test - Running Project
        run: |
          ls
          docker images
          docker compose up -d
          sleep 1
          docker compose ps

      - name: Run Tests
        run: |
          sleep 3
          docker compose logs
          echo "port being tested: ${{ secrets.PORT }}"
          curl -f http://localhost:${{ secrets.PORT }}

  deploy:  # Deploy to AWS EC2 using Terraform and SSH
    runs-on: ubuntu-latest
    needs: build-Test  # Ensures build-test job completes successfully
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with: 
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init 

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to AWS EC2
        run: |
          set -ex
          INSTANCE_ID=$(aws ec2 run-instances \
              --region us-east-1 \
              --image-id ami-01816d07b1128cd2d \
              --instance-type t2.micro \
              --key-name ${{ secrets.EC2_KEY_NAME }} \
              --security-groups flask-mysql \
              --iam-instance-profile Name=access-to-s3 \
              --user-data '#!/bin/bash
              yum update -y
              yum install -y yum-utils device-mapper-persistent-data lvm2
              amazon-linux-extras enable docker
              yum install -y docker
              systemctl start docker
              systemctl enable docker
              usermod -aG docker ec2-user
              newgrp docker
              DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r ".tag_name")
              curl -L "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose' \
              --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=project}]' \
              --query 'Instances[0].InstanceId' \
              --output text)

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

          aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region us-east-1

          PUBLIC_IP=$(aws ec2 describe-instances \
                      --region us-east-1 \
                      --instance-ids "$INSTANCE_ID" \
                      --query 'Reservations[0].Instances[0].PublicIpAddress' \
                      --output text)
                  
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Check SSH Connection Status
        run: |
          set -ex
          while ! nc -z ${{ env.PUBLIC_IP }} 22; do
              echo "waiting for ssh test to succeed.."
              sleep 3
          done

      - name: Install SSH Client
        run: |
          set -ex
          if ! ssh -V 2>&1 /dev/null; then 
           sudo apt-get update
           sudo apt-get install -y openssh-client
          fi

      - name: Write SSH Private Key to File
        run: |
          set -ex
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa 
          cat ~/.ssh/id_rsa 

      - name: Generate .env File for EC2 Instance Variables
        run: |
          echo "IMAGE_NAME=yuvalbenar/flasksqlgifbase" > .env
          echo "IMAGE_TAG=latest" >> .env
          echo "FLASK_ENV=${{ secrets.FLASK_ENV }}" >> .env
          echo "MYSQL_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "MYSQL_USER=${{ secrets.DATABASE_USER }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.DATABASE_NAME }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env

      - name: SCP to EC2 Instance
        run: |
          set -ex
          ls -ltra
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
              docker-compose.yaml \
              init.sql \
              .env \
              ec2-user@${{ env.PUBLIC_IP }}:/home/ec2-user/

      - name: SSH - Run Project on EC2 Instance
        run: |
          set -ex
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ env.PUBLIC_IP }} << EOF
              echo "now in ec2, waiting for user-data script to end successfully (installing docker)..."
              while [ ! -f /var/lib/cloud/instance/boot-finished ]; do
                  echo "still waiting.."
                  sleep 3
              done
              echo "user-data script finished successfully"
              newgrp docker
              cd /home/ec2-user/
              ls -ltra
              docker --version
              docker-compose --version
              docker-compose up -d --quiet-pull
              << EOF
