name: CI/CD Pipeline

on:
  push:
    branches:
      - cicd-pipelines  # Trigger on pushes to the specified branch

jobs:
  build-Test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERTOKEN }}

      - name: Set Environment Variables
        run: |
          echo "IMAGE_NAME=yuvalbenar/flasksqlgifbase" >> $GITHUB_ENV
          echo "IMAGE_TAG=v1.0.83" >> $GITHUB_ENV
          echo "FLASK_ENV=${{ secrets.FLASK_ENV }}" >> $GITHUB_ENV
          echo "MYSQL_HOST=${{ secrets.DATABASE_HOST }}" >> $GITHUB_ENV
          echo "MYSQL_USER=${{ secrets.DATABASE_USER }}" >> $GITHUB_ENV
          echo "MYSQL_DATABASE=${{ secrets.DATABASE_NAME }}" >> $GITHUB_ENV
          echo "PORT=${{ secrets.PORT }}" >> $GITHUB_ENV
          echo "MYSQL_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> $GITHUB_ENV
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_ENV

      - name: Generate .env File
        run: |
          echo "IMAGE_NAME=yuvalbenar/flasksqlgifbase" > .env
          echo "IMAGE_TAG=v1.0.83" >> .env
          echo "FLASK_ENV=${{ secrets.FLASK_ENV }}" >> .env
          echo "MYSQL_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "MYSQL_USER=${{ secrets.DATABASE_USER }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.DATABASE_NAME }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
        working-directory: /home/runner/work/terraflaskql/terraflaskql

      - name: Build and Tag Docker Image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} . 
          docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.IMAGE_NAME }}:latest

      - name: Build and Test with Docker Compose
        run: |
          ls
          docker compose build --no-cache
          docker compose up -d
          sleep 5
          docker compose ps
        working-directory: /home/runner/work/terraflaskql/terraflaskql

      - name: Test Application
        run: |
          docker compose logs
          curl -f http://localhost:${{ secrets.PORT }}
        working-directory: /home/runner/work/terraflaskql/terraflaskql

  deploy:
    runs-on: ubuntu-latest
    needs: build-Test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Apply
        env:
          TF_VAR_mysql_root_password: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          TF_VAR_mysql_database: ${{ secrets.MYSQL_DATABASE }}
          TF_VAR_mysql_user: ${{ secrets.MYSQL_USER }}
          TF_VAR_mysql_password: ${{ secrets.MYSQL_PASSWORD }}
          TF_VAR_database_host: ${{ secrets.DATABASE_HOST }}
          TF_VAR_port: ${{ secrets.PORT }}
          TF_VAR_flask_env: ${{ secrets.FLASK_ENV }}
          TF_VAR_image_tag: ${{ secrets.IMAGE_TAG }}
        run: terraform apply -auto-approve

      - name: Retrieve Public IP
        id: ip
        run: echo "::set-output name=public_ip::$(terraform output -raw public_ip)"

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Copy Files to EC2
        run: |
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            docker-compose.yaml .env \
            ec2-user@${{ steps.ip.outputs.public_ip }}:/home/ec2-user/

      - name: Run Application on EC2
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ steps.ip.outputs.public_ip }} << EOF
            cd /home/ec2-user
            docker-compose up -d --quiet-pull
            >>EOF
